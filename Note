// var baseRunning = (function(){
//  var baseStatus = store.live_game.bases
//  var score = 0
//  // var baseStatus = [1,1,1,0]
//
//   return function looper(numIn){
//     var num = numIn
//     for (var i = baseStatus.length -1; i >= 0; i--){
//       if (baseStatus[i] === 1){
//         score += 1
//         baseStatus[i] = baseStatus[i - 1]
//         baseStatus[i - 1] = 0
//       }else if(i === 0) {
//         break
//       }else{
//         baseStatus[i] = baseStatus[i - 1]
//         baseStatus[i - 1] = 0
//       }
//       // teamScore(score)
//     }
//
//     console.log(baseStatus)
//     console.log(score)
//     ///////////-------need this not to change
//
//     debugger
//       keepNum = num
//     num -= 1
//     if (num > 0){
//       baseRunning(num)
//     }else{
//       console.log(`bases = ${baseStatus} and Score = ${score}`);
//       store.live_game.bases = baseStatus
//       teamScore(score)
//       cleanScore(num)
//     }
//   }
//
// })()



-------------------------------Stretch Goal-------------------------------------
//runners only adv 1 if forced aka spot before is true
// const steal = function steals (basePositions){} -- stretch goal ( [2/5 chance success] )
// const bunt = function bunts (basePositions){} -- stretch goal (runners auto adv 1 & bunter = out)
// const hitBatter = function hitBatters (basePositions){} -- stretch goal
//end//

//GameLog div will use these functions above ^ to call out and log random plays//
//and announce the game play by play to the screen as the players hit their controllers//
// can be p tags or an unordered list <-- head with innings (prefer this)//

//Can also use above functions to help with clearing on strikeouts and walks outs//
//still need to throw in logic that clears on outs and strikes and walks//
//for a new a batter//
// This function will generate a random play in the game //
// This function is utilized in controller-button handler functions below it//
